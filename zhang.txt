1.创建库 
	第一步：
		mkdir demo //创建文件夹
		cd learngit	//进入文件夹
		pwd 		//查看文件夹路径
	
	第二部：
		git init//创建库
		git add xxx.t//将文件添加到库
		git commit -m "XXX" //提交到库 -m 描述提交的内容
		git status 	//查看库当前的状态
		git diff //查看库修改的内容
		git log //查看提交的日志  --pretty=oneline
		版本回退
			git reset --hard HEAD^ //回退到上一个版本
			HEAD //表示当前的版本  上一个版本就是HEAD^  上上一个版本就是HEAD^^   上100个版本HEAD~100
			git reset --hard 3628164 //回退到指定版本  commit id 3628164... 版本号没必要写全
			git reflog 	//查看你的每一次命令   可以获取commit id
		撤销修改
			git checkout -- xxx.txt //丢弃文件在工作区的修改全部撤销,总之，就是让这个文件回到最近一次git commit或git add时的状态。
			git reset HEAD xxx.txt  //git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。
		删除文件：
			rm test.txt //删除文件  注意：确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit
		远程仓库:
			添加远程库：
			第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
			ssh-keygen -t rsa -C "youremail@example.com" 	//新建key(密钥)
			git remote add origin 地址  //添加远程仓库   注意：添加一次即可，多此添加报错，删除远程的库，重新添加远程库在提交
			git push -u origin master   //提交远程仓库
			git remote rm origin  	//删除一个远程的库
			克隆远程库：
			git clone 地址  //克隆远程库
		分支管理：
			创建分支：
			git checkout -b dev //创建分支并切换到分支
			git branch 	//查看分支
			git branch <name>  //创建分支
			git checkout <name> //切换分支
			git merge <name> //合并某分支到当前分支
			git branch -d <name> //删除分支
			分支管理策略：
			通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
			如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
			下面我们实战一下--no-ff方式的git merge
			准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward
			git merge --no-ff -m "merge with no-ff" dev  //“描述”  dev  分支
			git status //当前工作现场“储藏”起来
			git stash list //查看储藏的工作区
			工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
			一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
			另一种方式是用git stash pop，恢复的同时把stash内容也删了：
			Feature分支：
			git checkout -b feature-vulcan //创建并切换Feature分支
			git branch -d feature-vulcan //删除feature分支   注意：销毁失败。Git友情提醒，feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用命令git branch -D feature-vulcan

			

		 

